# Pact Configuration Properties
# These properties control the behavior of Pact contract testing

# Provider Configuration
pact.provider.name=auto-insurance-api
pact.provider.version=1.0.0-SNAPSHOT
pact.provider.tags=main,feature

# Consumer Configuration  
pact.consumer.name=auto-insurance-client
pact.consumer.version=1.0.0-SNAPSHOT

# Pact Broker Configuration
pact.broker.url=${PACT_BROKER_URL:http://localhost:9292}
pact.broker.username=${PACT_BROKER_USERNAME:}
pact.broker.password=${PACT_BROKER_PASSWORD:}

# Publishing Configuration
pact.publish.results=${PACT_PUBLISH_RESULTS:false}
pact.publish.verification.results=${PACT_PUBLISH_VERIFICATION_RESULTS:false}

# Verification Configuration
pact.verification.enablePending=${PACT_ENABLE_PENDING:true}
pact.verification.includeWipPacts=${PACT_INCLUDE_WIP:false}

# Consumer Version Selectors
pact.consumer.version.selectors=${PACT_CONSUMER_VERSION_SELECTORS:{"tag": "main"}}

# Provider State Configuration
pact.provider.statechange.url=http://localhost:8080/pact-state-changes
pact.provider.statechange.teardown=false

# Logging Configuration
pact.logging.level=${PACT_LOGGING_LEVEL:INFO}
pact.logging.outputToConsole=true

# Test Configuration
pact.test.timeout=30000
pact.test.requests.timeout=10000

# Contract Directory Configuration
pact.contracts.directory=target/pacts
pact.reports.directory=target/pact-reports

# TDD-specific Configuration
# RED: Enable strict matching to catch contract violations early  
pact.matching.strict=${PACT_STRICT_MATCHING:true}

# GREEN: Allow for flexible matching during initial implementation
pact.matching.flexible.arrays=${PACT_FLEXIBLE_ARRAYS:false}

# BLUE: Enable detailed reporting for refactoring confidence
pact.reporting.detailed=${PACT_DETAILED_REPORTING:true}