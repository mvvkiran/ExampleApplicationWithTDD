#!/bin/bash

# Pre-push hook for comprehensive TDD compliance
# Runs full test suite and coverage analysis before pushing

set -e

echo "🔴🟢🔵 TDD Pre-Push Validation"
echo "=============================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
MIN_COVERAGE=80
MAX_PUSH_VIOLATIONS=0
VIOLATIONS=0

# Function to run comprehensive test suite
run_full_test_suite() {
    echo -e "${BLUE}🧪 Running comprehensive test suite...${NC}"
    
    # Skip clean to preserve existing JAR file from previous build
    
    echo "  • Compiling source code..."
    if ! mvn compile -q; then
        echo -e "${RED}❌ Compilation failed${NC}"
        VIOLATIONS=$((VIOLATIONS + 1))
        return 1
    fi
    
    echo "  • Running all tests..."
    if mvn test -q; then
        TOTAL_TESTS=$(mvn -q test 2>&1 | grep -o "Tests run: [0-9]*" | grep -o "[0-9]*" | head -1 || echo "0")
        echo -e "${GREEN}✅ All tests passed ($TOTAL_TESTS tests)${NC}"
    else
        echo -e "${RED}❌ Test failures detected!${NC}"
        echo -e "${YELLOW}Failed tests details:${NC}"
        mvn test | grep -A 5 -B 5 "FAILURE\|ERROR" || true
        VIOLATIONS=$((VIOLATIONS + 1))
    fi
}

# Function to analyze test coverage
analyze_test_coverage() {
    echo -e "${BLUE}📊 Analyzing test coverage...${NC}"
    
    if mvn jacoco:report -q 2>/dev/null; then
        COVERAGE_XML="target/site/jacoco/jacoco.xml"
        COVERAGE_HTML="target/site/jacoco/index.html"
        
        if [ -f "$COVERAGE_XML" ]; then
            # Parse XML for accurate coverage
            COVERAGE=$(grep -o 'covered="[0-9]*"' "$COVERAGE_XML" | grep -o '[0-9]*' | head -1)
            MISSED=$(grep -o 'missed="[0-9]*"' "$COVERAGE_XML" | grep -o '[0-9]*' | head -1)
            
            if [ -n "$COVERAGE" ] && [ -n "$MISSED" ]; then
                TOTAL=$((COVERAGE + MISSED))
                if [ $TOTAL -gt 0 ]; then
                    COVERAGE_PERCENT=$((COVERAGE * 100 / TOTAL))
                    
                    if [ $COVERAGE_PERCENT -ge $MIN_COVERAGE ]; then
                        echo -e "${GREEN}✅ Test coverage: ${COVERAGE_PERCENT}% (>= ${MIN_COVERAGE}%)${NC}"
                    else
                        echo -e "${RED}❌ Insufficient test coverage: ${COVERAGE_PERCENT}%${NC}"
                        echo -e "${YELLOW}Required: ${MIN_COVERAGE}%, Current: ${COVERAGE_PERCENT}%${NC}"
                        VIOLATIONS=$((VIOLATIONS + 1))
                    fi
                fi
            fi
        elif [ -f "$COVERAGE_HTML" ]; then
            # Fallback to HTML parsing
            COVERAGE_PERCENT=$(grep -o 'Total[^%]*[0-9]\+%' "$COVERAGE_HTML" | grep -o '[0-9]\+' | tail -1 || echo "0")
            
            if [ $COVERAGE_PERCENT -ge $MIN_COVERAGE ]; then
                echo -e "${GREEN}✅ Test coverage: ${COVERAGE_PERCENT}% (>= ${MIN_COVERAGE}%)${NC}"
            else
                echo -e "${RED}❌ Insufficient test coverage: ${COVERAGE_PERCENT}%${NC}"
                VIOLATIONS=$((VIOLATIONS + 1))
            fi
        else
            echo -e "${YELLOW}⚠️  Unable to determine coverage - assuming compliance${NC}"
        fi
    else
        echo -e "${YELLOW}⚠️  Coverage report generation failed${NC}"
        VIOLATIONS=$((VIOLATIONS + 1))
    fi
}

# Function to check TDD commit history balance
analyze_tdd_history() {
    echo -e "${BLUE}📈 Analyzing TDD commit history...${NC}"
    
    # Analyze recent commits (last 20)
    RED_COMMITS=$(git log --oneline -20 | grep -ciE "(test|red|failing):" || echo "0")
    GREEN_COMMITS=$(git log --oneline -20 | grep -ciE "(feat|implement|green|pass):" || echo "0")
    BLUE_COMMITS=$(git log --oneline -20 | grep -ciE "(refactor|blue|cleanup|optimize):" || echo "0")
    
    TOTAL_TDD_COMMITS=$((RED_COMMITS + GREEN_COMMITS + BLUE_COMMITS))
    
    if [ $TOTAL_TDD_COMMITS -gt 0 ]; then
        echo "TDD Commit Distribution (last 20 commits):"
        echo "🔴 RED: $RED_COMMITS | 🟢 GREEN: $GREEN_COMMITS | 🔵 BLUE: $BLUE_COMMITS"
        
        # Check for balanced TDD workflow
        if [ $RED_COMMITS -eq 0 ] && [ $GREEN_COMMITS -gt 0 ]; then
            echo -e "${YELLOW}⚠️  No failing tests commits found - ensure you're following RED-first TDD${NC}"
        fi
        
        if [ $GREEN_COMMITS -eq 0 ] && [ $RED_COMMITS -gt 0 ]; then
            echo -e "${YELLOW}⚠️  No implementation commits found - ensure you're completing the GREEN phase${NC}"
        fi
        
        if [ $BLUE_COMMITS -eq 0 ] && [ $((RED_COMMITS + GREEN_COMMITS)) -gt 5 ]; then
            echo -e "${YELLOW}⚠️  No refactoring commits found - consider BLUE phase improvements${NC}"
        fi
        
        echo -e "${GREEN}✅ TDD workflow appears balanced${NC}"
    else
        echo -e "${YELLOW}⚠️  No TDD-specific commits found in recent history${NC}"
    fi
}

# Function to check for code quality issues
check_code_quality() {
    echo -e "${BLUE}🔍 Checking code quality...${NC}"
    
    # Check for common code smells
    LARGE_METHODS=$(find src/main/java -name "*.java" -exec grep -l "public.*{" {} \; | xargs -I {} sh -c 'lines=$(grep -c "^" "{}"); if [ $lines -gt 100 ]; then echo "{}"; fi' || true)
    
    if [ -n "$LARGE_METHODS" ]; then
        echo -e "${YELLOW}⚠️  Large files detected (>100 lines) - consider refactoring:${NC}"
        echo "$LARGE_METHODS" | sed 's/^/  - /'
    else
        echo -e "${GREEN}✅ No oversized files detected${NC}"
    fi
    
    # Check for TODO/FIXME comments
    TODO_COUNT=$(find src -name "*.java" -exec grep -l "TODO\|FIXME" {} \; | wc -l || echo "0")
    if [ $TODO_COUNT -gt 0 ]; then
        echo -e "${YELLOW}⚠️  $TODO_COUNT files contain TODO/FIXME comments${NC}"
    else
        echo -e "${GREEN}✅ No pending TODO/FIXME items${NC}"
    fi
}

# Function to validate build artifacts
validate_build() {
    echo -e "${BLUE}🏗️  Validating build artifacts...${NC}"
    
    # Check if JAR already exists (from previous build)
    JAR_FILE="target/auto-insurance-api-1.0.0-SNAPSHOT.jar"
    if [ -f "$JAR_FILE" ]; then
        echo -e "${GREEN}✅ Build artifact found${NC}"
        return 0
    fi
    
    # If JAR doesn't exist, try to build it
    if mvn package -DskipTests -q; then
        if [ -f "$JAR_FILE" ]; then
            echo -e "${GREEN}✅ Build artifact created successfully${NC}"
        else
            echo -e "${RED}❌ Build artifact not found after build${NC}"
            VIOLATIONS=$((VIOLATIONS + 1))
        fi
    else
        echo -e "${RED}❌ Build failed${NC}"
        VIOLATIONS=$((VIOLATIONS + 1))
    fi
}

# Main execution
echo -e "${BLUE}Starting comprehensive TDD validation before push...${NC}"
echo ""

# Run all checks
run_full_test_suite
echo ""

analyze_test_coverage
echo ""

analyze_tdd_history
echo ""

check_code_quality
echo ""

validate_build
echo ""

# Summary and decision
echo "============================================="
if [ $VIOLATIONS -eq 0 ]; then
    echo -e "${GREEN}🎉 All TDD compliance checks PASSED!${NC}"
    echo -e "${GREEN}✅ Safe to push - excellent TDD discipline!${NC}"
    echo ""
    echo -e "${BLUE}🏆 TDD Quality Summary:${NC}"
    echo "• All tests passing"
    echo "• Coverage above threshold"
    echo "• Build successful"
    echo "• Following TDD commit patterns"
    exit 0
else
    echo -e "${RED}❌ TDD compliance violations detected!${NC}"
    echo -e "${RED}Found $VIOLATIONS violation(s) that must be fixed${NC}"
    echo ""
    echo -e "${YELLOW}Before pushing, please:${NC}"
    echo "1. Fix all failing tests"
    echo "2. Ensure test coverage >= $MIN_COVERAGE%"
    echo "3. Verify build success"
    echo "4. Follow TDD commit message patterns"
    echo ""
    echo -e "${YELLOW}TDD Reminder:${NC}"
    echo "🔴 Write failing tests first"
    echo "🟢 Make tests pass with minimal code"
    echo "🔵 Refactor while keeping tests green"
    echo ""
    echo -e "${YELLOW}To bypass this check (STRONGLY NOT RECOMMENDED):${NC}"
    echo "git push --no-verify"
    echo ""
    exit 1
fi