#!/bin/bash

# Commit message hook for TDD compliance
# Enforces TDD-friendly commit message patterns

set -e

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üî¥üü¢üîµ TDD Commit Message Validation"
echo "===================================="

# TDD-specific commit patterns
RED_PATTERNS="^(test|red|failing):"
GREEN_PATTERNS="^(feat|implement|green|pass):"
BLUE_PATTERNS="^(refactor|blue|cleanup|optimize|perf):"
FIX_PATTERNS="^(fix|bug):"
DOCS_PATTERNS="^(docs|readme):"
CHORE_PATTERNS="^(chore|build|ci):"

# Check for conventional commit format
if echo "$COMMIT_MSG" | grep -qE "^(test|red|failing|feat|implement|green|pass|refactor|blue|cleanup|optimize|perf|fix|bug|docs|readme|chore|build|ci):" ; then
    # Determine TDD phase based on commit message
    if echo "$COMMIT_MSG" | grep -qiE "$RED_PATTERNS"; then
        echo -e "${RED}üî¥ RED Phase Commit Detected${NC}"
        echo "‚úÖ Writing failing tests first - TDD compliant!"
        
        # Verify this is actually a test-only commit
        STAGED_FILES=$(git diff --cached --name-only)
        NON_TEST_FILES=$(echo "$STAGED_FILES" | grep -v -E 'Test\.java$|test.*\.java$' | grep '\.java$' || true)
        
        if [ -n "$NON_TEST_FILES" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: RED phase commit includes implementation files:${NC}"
            echo "$NON_TEST_FILES" | sed 's/^/  - /'
            echo "Consider splitting into separate commits for pure TDD workflow"
        fi
        
    elif echo "$COMMIT_MSG" | grep -qiE "$GREEN_PATTERNS"; then
        echo -e "${GREEN}üü¢ GREEN Phase Commit Detected${NC}"
        echo "‚úÖ Implementing code to pass tests - TDD compliant!"
        
    elif echo "$COMMIT_MSG" | grep -qiE "$BLUE_PATTERNS"; then
        echo -e "${BLUE}üîµ BLUE Phase Commit Detected${NC}"
        echo "‚úÖ Refactoring while keeping tests green - TDD compliant!"
        
    elif echo "$COMMIT_MSG" | grep -qiE "$FIX_PATTERNS"; then
        echo -e "${YELLOW}üîß Fix Commit Detected${NC}"
        echo "Ensure tests are updated/added for the bug fix"
        
    elif echo "$COMMIT_MSG" | grep -qiE "$DOCS_PATTERNS"; then
        echo -e "${BLUE}üìö Documentation Commit${NC}"
        echo "‚úÖ Documentation update"
        
    elif echo "$COMMIT_MSG" | grep -qiE "$CHORE_PATTERNS"; then
        echo -e "${BLUE}üîß Maintenance Commit${NC}"
        echo "‚úÖ Build/tooling update"
    fi
    
    echo -e "${GREEN}‚úÖ Commit message follows TDD-friendly format${NC}"
    
else
    echo -e "${RED}‚ùå Invalid commit message format!${NC}"
    echo ""
    echo -e "${YELLOW}TDD-friendly commit message formats:${NC}"
    echo ""
    echo -e "${RED}üî¥ RED Phase (failing tests):${NC}"
    echo "  test: add failing test for premium calculation"
    echo "  red: failing test for driver age validation"
    echo "  failing: test case for invalid VIN format"
    echo ""
    echo -e "${GREEN}üü¢ GREEN Phase (passing implementation):${NC}"
    echo "  feat: implement premium calculation logic"
    echo "  implement: add driver age validation"
    echo "  green: make VIN validation tests pass"
    echo ""
    echo -e "${BLUE}üîµ BLUE Phase (refactoring):${NC}"
    echo "  refactor: extract quote validation service"
    echo "  blue: optimize premium calculation algorithm"
    echo "  cleanup: simplify quote builder pattern"
    echo ""
    echo -e "${YELLOW}Other allowed formats:${NC}"
    echo "  fix: resolve premium calculation bug"
    echo "  docs: update API documentation"
    echo "  chore: update Maven dependencies"
    echo ""
    echo -e "${YELLOW}Your commit message:${NC}"
    echo "\"$COMMIT_MSG\""
    echo ""
    echo -e "${YELLOW}To bypass this check (NOT RECOMMENDED):${NC}"
    echo "git commit --no-verify"
    echo ""
    exit 1
fi

# Check for proper TDD cycle indicators
echo ""
echo -e "${BLUE}üìä TDD Cycle Analysis:${NC}"

# Count recent commits by type to analyze TDD flow
RECENT_RED=$(git log --oneline -10 | grep -ciE "(test|red|failing):" || echo "0")
RECENT_GREEN=$(git log --oneline -10 | grep -ciE "(feat|implement|green|pass):" || echo "0")
RECENT_BLUE=$(git log --oneline -10 | grep -ciE "(refactor|blue|cleanup|optimize):" || echo "0")

echo "Recent commits (last 10):"
echo "üî¥ RED: $RECENT_RED | üü¢ GREEN: $RECENT_GREEN | üîµ BLUE: $RECENT_BLUE"

# Provide TDD cycle guidance
if [ "$RECENT_RED" -gt "$RECENT_GREEN" ]; then
    echo -e "${YELLOW}üí° Tip: Consider implementing code to make your tests pass (GREEN phase)${NC}"
elif [ "$RECENT_GREEN" -gt "$RECENT_BLUE" ] && [ "$RECENT_GREEN" -gt 2 ]; then
    echo -e "${YELLOW}üí° Tip: Consider refactoring your code for better quality (BLUE phase)${NC}"
elif [ "$RECENT_BLUE" -gt 3 ]; then
    echo -e "${YELLOW}üí° Tip: Consider adding new failing tests for next feature (RED phase)${NC}"
fi

echo ""
echo -e "${GREEN}üéâ TDD commit message validation passed!${NC}"