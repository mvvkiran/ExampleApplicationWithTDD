#!/bin/bash

# Pre-commit hook for TDD compliance monitoring
# This hook prevents commits that violate TDD principles

set -e

echo "üî¥üü¢üîµ TDD Compliance Check - Pre-commit Hook"
echo "============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
MIN_TEST_COVERAGE=80
TDD_VIOLATIONS=0

# Function to check if staged files include tests
check_test_coverage() {
    echo -e "${BLUE}üìä Checking test coverage for new code...${NC}"
    
    # Get staged Java files (excluding test files)
    STAGED_JAVA_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.java$' | grep -v '/test/' | grep -v 'Test\.java$' || true)
    
    if [ -n "$STAGED_JAVA_FILES" ]; then
        echo -e "${YELLOW}üìù New/modified Java files found:${NC}"
        echo "$STAGED_JAVA_FILES" | sed 's/^/  - /'
        
        # Check if corresponding test files exist or are being committed
        MISSING_TESTS=()
        for java_file in $STAGED_JAVA_FILES; do
            # Convert src/main/java path to src/test/java path
            test_file=$(echo "$java_file" | sed 's|src/main/java|src/test/java|' | sed 's|\.java$|Test.java|')
            
            if [ ! -f "$test_file" ]; then
                # Check if test file is being committed
                STAGED_TEST=$(git diff --cached --name-only | grep "$test_file" || true)
                if [ -z "$STAGED_TEST" ]; then
                    MISSING_TESTS+=("$java_file -> $test_file")
                fi
            fi
        done
        
        if [ ${#MISSING_TESTS[@]} -gt 0 ]; then
            echo -e "${RED}‚ùå TDD VIOLATION: Code committed without corresponding tests!${NC}"
            echo -e "${YELLOW}Missing test files:${NC}"
            for missing in "${MISSING_TESTS[@]}"; do
                echo "  - $missing"
            done
            TDD_VIOLATIONS=$((TDD_VIOLATIONS + 1))
        else
            echo -e "${GREEN}‚úÖ All Java files have corresponding test files${NC}"
        fi
    fi
}

# Function to run tests and check coverage
run_tests_and_check_coverage() {
    echo -e "${BLUE}üß™ Running test suite...${NC}"
    
    # Run Maven tests
    if mvn -q test > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ All tests passed${NC}"
    else
        echo -e "${RED}‚ùå TDD VIOLATION: Tests are failing!${NC}"
        echo -e "${YELLOW}Please fix failing tests before committing.${NC}"
        echo "Run 'mvn test' to see detailed failure information."
        TDD_VIOLATIONS=$((TDD_VIOLATIONS + 1))
    fi
    
    # Check test coverage with JaCoCo
    echo -e "${BLUE}üìà Checking test coverage...${NC}"
    if mvn -q jacoco:report > /dev/null 2>&1; then
        # Parse coverage from JaCoCo report (simplified check)
        COVERAGE_FILE="target/site/jacoco/index.html"
        if [ -f "$COVERAGE_FILE" ]; then
            # Extract coverage percentage (this is a simplified extraction)
            COVERAGE=$(grep -o 'Total[^%]*%' "$COVERAGE_FILE" | grep -o '[0-9]\+%' | head -1 | tr -d '%' || echo "0")
            
            if [ "$COVERAGE" -ge "$MIN_TEST_COVERAGE" ]; then
                echo -e "${GREEN}‚úÖ Test coverage: ${COVERAGE}% (>= ${MIN_TEST_COVERAGE}%)${NC}"
            else
                echo -e "${RED}‚ùå TDD VIOLATION: Test coverage too low!${NC}"
                echo -e "${YELLOW}Current: ${COVERAGE}%, Required: ${MIN_TEST_COVERAGE}%${NC}"
                TDD_VIOLATIONS=$((TDD_VIOLATIONS + 1))
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Could not determine test coverage${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Could not generate coverage report${NC}"
    fi
}

# Function to check commit patterns for TDD compliance
check_tdd_commit_pattern() {
    echo -e "${BLUE}üè∑Ô∏è  Analyzing commit pattern...${NC}"
    
    # Check if this looks like a RED commit (test-first)
    STAGED_TEST_FILES=$(git diff --cached --name-only | grep -E 'Test\.java$|test.*\.java$' || true)
    STAGED_IMPL_FILES=$(git diff --cached --name-only | grep '\.java$' | grep -v -E 'Test\.java$|test.*\.java$' || true)
    
    if [ -n "$STAGED_TEST_FILES" ] && [ -z "$STAGED_IMPL_FILES" ]; then
        echo -e "${RED}üî¥ RED Phase detected: Test-only commit (TDD compliant)${NC}"
    elif [ -n "$STAGED_IMPL_FILES" ] && [ -n "$STAGED_TEST_FILES" ]; then
        echo -e "${GREEN}üü¢ GREEN Phase detected: Implementation with tests${NC}"
    elif [ -n "$STAGED_IMPL_FILES" ] && [ -z "$STAGED_TEST_FILES" ]; then
        # Check if this is a refactoring commit (BLUE phase)
        COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
        if [ -f "$COMMIT_MSG_FILE" ]; then
            MSG=$(cat "$COMMIT_MSG_FILE" | head -1)
            if echo "$MSG" | grep -iE "(refactor|blue|cleanup|optimize)" > /dev/null; then
                echo -e "${BLUE}üîµ BLUE Phase detected: Refactoring commit${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Implementation without new tests - ensure this follows TDD${NC}"
            fi
        fi
    fi
}

# Main execution
echo -e "${BLUE}Starting TDD compliance checks...${NC}"
echo ""

check_test_coverage
echo ""

run_tests_and_check_coverage
echo ""

check_tdd_commit_pattern
echo ""

# Summary
if [ $TDD_VIOLATIONS -eq 0 ]; then
    echo -e "${GREEN}üéâ TDD Compliance Check PASSED!${NC}"
    echo -e "${GREEN}‚úÖ Ready to commit - following TDD principles${NC}"
    exit 0
else
    echo -e "${RED}‚ùå TDD Compliance Check FAILED!${NC}"
    echo -e "${RED}Found $TDD_VIOLATIONS TDD violation(s)${NC}"
    echo ""
    echo -e "${YELLOW}TDD Reminder:${NC}"
    echo "üî¥ RED: Write failing tests first"
    echo "üü¢ GREEN: Write minimal code to pass tests"
    echo "üîµ BLUE: Refactor while keeping tests green"
    echo ""
    echo -e "${YELLOW}To bypass this check (NOT RECOMMENDED):${NC}"
    echo "git commit --no-verify"
    echo ""
    exit 1
fi