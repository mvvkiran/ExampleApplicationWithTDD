#!/bin/bash

# TDD Monitoring and Alerting Script
# Can be run manually or scheduled to monitor TDD compliance

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
MONITORING_DAYS=${1:-7}  # Default to last 7 days
MIN_COVERAGE=80
NOTIFICATION_FILE=".git/tdd-violations.log"

echo -e "${BOLD}üî¥üü¢üîµ TDD Compliance Monitoring Report${NC}"
echo "==========================================="
echo "Analyzing TDD compliance for the last $MONITORING_DAYS days"
echo "Generated: $(date)"
echo ""

# Function to analyze commit patterns
analyze_commit_patterns() {
    echo -e "${BLUE}üìä TDD Commit Pattern Analysis${NC}"
    echo "--------------------------------"
    
    SINCE_DATE=$(date -d "$MONITORING_DAYS days ago" '+%Y-%m-%d' 2>/dev/null || date -v-${MONITORING_DAYS}d '+%Y-%m-%d')
    
    # Count commits by TDD phase - ensure single values
    RED_COMMITS=$(git log --since="$SINCE_DATE" --oneline | grep -cE "(test|red|failing):" 2>/dev/null | head -1 || echo "0")
    GREEN_COMMITS=$(git log --since="$SINCE_DATE" --oneline | grep -cE "(feat|implement|green|pass):" 2>/dev/null | head -1 || echo "0")
    BLUE_COMMITS=$(git log --since="$SINCE_DATE" --oneline | grep -cE "(refactor|blue|cleanup|optimize):" 2>/dev/null | head -1 || echo "0")
    
    # Remove any whitespace/newlines from values
    RED_COMMITS=$(echo "$RED_COMMITS" | tr -d '[:space:]')
    GREEN_COMMITS=$(echo "$GREEN_COMMITS" | tr -d '[:space:]')
    BLUE_COMMITS=$(echo "$BLUE_COMMITS" | tr -d '[:space:]')
    
    # Count total commits and subtract TDD commits to get other commits
    TOTAL_COMMITS_TEMP=$(git log --since="$SINCE_DATE" --oneline | wc -l | tr -d '[:space:]')
    OTHER_COMMITS=$(( ${TOTAL_COMMITS_TEMP:-0} - ${RED_COMMITS:-0} - ${GREEN_COMMITS:-0} - ${BLUE_COMMITS:-0} ))
    
    TOTAL_COMMITS=$(( ${RED_COMMITS:-0} + ${GREEN_COMMITS:-0} + ${BLUE_COMMITS:-0} + ${OTHER_COMMITS:-0} ))
    
    if [ $TOTAL_COMMITS -eq 0 ]; then
        echo -e "${YELLOW}No commits found in the last $MONITORING_DAYS days${NC}"
        return
    fi
    
    echo "Commit Distribution:"
    echo "üî¥ RED (tests): $RED_COMMITS ($(( RED_COMMITS * 100 / TOTAL_COMMITS ))%)"
    echo "üü¢ GREEN (implementation): $GREEN_COMMITS ($(( GREEN_COMMITS * 100 / TOTAL_COMMITS ))%)"
    echo "üîµ BLUE (refactoring): $BLUE_COMMITS ($(( BLUE_COMMITS * 100 / TOTAL_COMMITS ))%)"
    echo "‚ö™ Other: $OTHER_COMMITS ($(( OTHER_COMMITS * 100 / TOTAL_COMMITS ))%)"
    echo "üìà Total: $TOTAL_COMMITS commits"
    echo ""
    
    # Analysis and alerts
    TDD_COMMITS=$((RED_COMMITS + GREEN_COMMITS + BLUE_COMMITS))
    if [ $TDD_COMMITS -eq 0 ]; then
        echo -e "${RED}üö® ALERT: No TDD-specific commits found!${NC}"
        echo "Recommendation: Ensure commit messages follow TDD patterns"
        log_violation "No TDD commits in last $MONITORING_DAYS days"
    elif [ $((TDD_COMMITS * 100 / TOTAL_COMMITS)) -lt 70 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Low TDD commit ratio ($(( TDD_COMMITS * 100 / TOTAL_COMMITS ))%)${NC}"
        log_violation "Low TDD commit ratio: $(( TDD_COMMITS * 100 / TOTAL_COMMITS ))%"
    else
        echo -e "${GREEN}‚úÖ Good TDD commit discipline${NC}"
    fi
    
    # Check for balanced workflow
    if [ $RED_COMMITS -eq 0 ] && [ $GREEN_COMMITS -gt 0 ]; then
        echo -e "${RED}üö® ALERT: Implementation without failing tests first!${NC}"
        log_violation "GREEN commits without preceding RED commits"
    fi
    
    if [ $GREEN_COMMITS -eq 0 ] && [ $RED_COMMITS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Tests written but no implementation commits${NC}"
        log_violation "RED commits without completing GREEN phase"
    fi
    
    echo ""
}

# Function to check current test coverage
check_current_coverage() {
    echo -e "${BLUE}üìà Current Test Coverage Analysis${NC}"
    echo "---------------------------------"
    
    if mvn jacoco:report -q 2>/dev/null; then
        COVERAGE_XML="target/site/jacoco/jacoco.xml"
        
        if [ -f "$COVERAGE_XML" ]; then
            # Parse coverage data - sum up all values to handle multiple packages
            INSTRUCTION_COVERED=$(grep 'type="INSTRUCTION"' "$COVERAGE_XML" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            INSTRUCTION_MISSED=$(grep 'type="INSTRUCTION"' "$COVERAGE_XML" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            
            BRANCH_COVERED=$(grep 'type="BRANCH"' "$COVERAGE_XML" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            BRANCH_MISSED=$(grep 'type="BRANCH"' "$COVERAGE_XML" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            
            LINE_COVERED=$(grep 'type="LINE"' "$COVERAGE_XML" | grep -o 'covered="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            LINE_MISSED=$(grep 'type="LINE"' "$COVERAGE_XML" | grep -o 'missed="[0-9]*"' | grep -o '[0-9]*' | awk '{sum += $1} END {print sum+0}')
            
            if [ -n "$LINE_COVERED" ] && [ -n "$LINE_MISSED" ]; then
                TOTAL_LINES=$(( ${LINE_COVERED:-0} + ${LINE_MISSED:-0} ))
                if [ $TOTAL_LINES -gt 0 ]; then
                    COVERAGE_PERCENT=$((LINE_COVERED * 100 / TOTAL_LINES))
                    
                    echo "Coverage Details:"
                    echo "üìä Line Coverage: $COVERAGE_PERCENT% ($LINE_COVERED/$TOTAL_LINES lines)"
                    
                    if [ -n "$BRANCH_COVERED" ] && [ -n "$BRANCH_MISSED" ]; then
                        TOTAL_BRANCHES=$((BRANCH_COVERED + BRANCH_MISSED))
                        if [ $TOTAL_BRANCHES -gt 0 ]; then
                            BRANCH_PERCENT=$((BRANCH_COVERED * 100 / TOTAL_BRANCHES))
                            echo "üå≥ Branch Coverage: $BRANCH_PERCENT% ($BRANCH_COVERED/$TOTAL_BRANCHES branches)"
                        fi
                    fi
                    
                    if [ $COVERAGE_PERCENT -ge $MIN_COVERAGE ]; then
                        echo -e "${GREEN}‚úÖ Coverage meets requirement (>= $MIN_COVERAGE%)${NC}"
                    else
                        echo -e "${RED}üö® ALERT: Coverage below threshold!${NC}"
                        echo "Current: $COVERAGE_PERCENT%, Required: $MIN_COVERAGE%"
                        log_violation "Test coverage below threshold: $COVERAGE_PERCENT%"
                    fi
                fi
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Coverage report not available${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Unable to generate coverage report${NC}"
    fi
    echo ""
}

# Function to analyze test trends
analyze_test_trends() {
    echo -e "${BLUE}üìâ Test Trend Analysis${NC}"
    echo "----------------------"
    
    # Count test files
    CURRENT_TESTS=$(find src/test -name "*Test.java" 2>/dev/null | wc -l || echo "0")
    CURRENT_IMPL=$(find src/main/java -name "*.java" 2>/dev/null | wc -l || echo "0")
    
    echo "Current Test Metrics:"
    echo "üß™ Test Files: $CURRENT_TESTS"
    echo "üìÑ Implementation Files: $CURRENT_IMPL"
    
    if [ $CURRENT_IMPL -gt 0 ]; then
        TEST_RATIO=$((CURRENT_TESTS * 100 / CURRENT_IMPL))
        echo "üéØ Test-to-Implementation Ratio: $TEST_RATIO%"
        
        if [ $TEST_RATIO -lt 50 ]; then
            echo -e "${RED}üö® ALERT: Low test-to-implementation ratio!${NC}"
            log_violation "Low test-to-implementation ratio: $TEST_RATIO%"
        elif [ $TEST_RATIO -lt 80 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Consider adding more tests${NC}"
        else
            echo -e "${GREEN}‚úÖ Good test coverage ratio${NC}"
        fi
    fi
    
    # Analyze recent test additions
    TEST_COMMITS=$(git log --since="$SINCE_DATE" --name-only --oneline | grep -c "Test\.java" || echo "0")
    if [ $TEST_COMMITS -eq 0 ] && [ $TOTAL_COMMITS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No test file changes in recent commits${NC}"
        log_violation "No test file changes in $MONITORING_DAYS days"
    fi
    
    echo ""
}

# Function to check for TDD anti-patterns
check_antipatterns() {
    echo -e "${BLUE}üö® TDD Anti-Pattern Detection${NC}"
    echo "------------------------------"
    
    VIOLATIONS_FOUND=0
    
    # Check for large test methods
    LARGE_TESTS=$(find src/test -name "*Test.java" -exec grep -l "public.*test.*{" {} \; 2>/dev/null | xargs -I {} sh -c 'methods=$(grep -c "public.*test" "{}"); if [ $methods -gt 20 ]; then echo "{} ($methods test methods)"; fi' || true)
    
    if [ -n "$LARGE_TESTS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Large test classes detected:${NC}"
        echo "$LARGE_TESTS" | sed 's/^/  - /'
        VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + 1))
    fi
    
    # Check for missing assertions in tests (include MockMvc andExpect)
    WEAK_TESTS=$(find src/test -name "*Test.java" -exec grep -L "assert\|verify\|expect\|andExpect" {} \; 2>/dev/null || true)
    if [ -n "$WEAK_TESTS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Test files with no assertions:${NC}"
        echo "$WEAK_TESTS" | sed 's/^/  - /'
        VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + 1))
    fi
    
    # Check for commented test methods
    COMMENTED_TESTS=$(find src/test -name "*Test.java" -exec grep -l "//.*@Test\|/\*.*@Test" {} \; 2>/dev/null || true)
    if [ -n "$COMMENTED_TESTS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Files with commented test methods:${NC}"
        echo "$COMMENTED_TESTS" | sed 's/^/  - /'
        VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + 1))
    fi
    
    if [ $VIOLATIONS_FOUND -eq 0 ]; then
        echo -e "${GREEN}‚úÖ No TDD anti-patterns detected${NC}"
    else
        log_violation "$VIOLATIONS_FOUND TDD anti-patterns detected"
    fi
    
    echo ""
}

# Function to log violations
log_violation() {
    echo "$(date): $1" >> "$NOTIFICATION_FILE"
}

# Function to generate summary report
generate_summary() {
    echo -e "${BOLD}üìã TDD Monitoring Summary${NC}"
    echo "========================="
    
    if [ -f "$NOTIFICATION_FILE" ]; then
        VIOLATION_COUNT=$(wc -l < "$NOTIFICATION_FILE")
        if [ $VIOLATION_COUNT -gt 0 ]; then
            echo -e "${RED}üö® $VIOLATION_COUNT TDD violations detected!${NC}"
            echo ""
            echo -e "${YELLOW}Recent violations:${NC}"
            tail -5 "$NOTIFICATION_FILE" | sed 's/^/  ‚Ä¢ /'
            echo ""
            echo -e "${YELLOW}üìß Consider reviewing TDD practices with the team${NC}"
            echo ""
            echo -e "${BLUE}üí° TDD Best Practices Reminder:${NC}"
            echo "1. üî¥ Write failing tests first (RED)"
            echo "2. üü¢ Write minimal code to pass (GREEN)"
            echo "3. üîµ Refactor while keeping tests green (BLUE)"
            echo "4. Keep test coverage above $MIN_COVERAGE%"
            echo "5. Use TDD-friendly commit messages"
        else
            echo -e "${GREEN}üéâ No TDD violations detected - excellent work!${NC}"
        fi
    else
        echo -e "${GREEN}üéâ No TDD violations detected - excellent work!${NC}"
    fi
    
    echo ""
    echo "Full report saved to: $NOTIFICATION_FILE"
    echo "Run './githooks/tdd-monitor [days]' to check different time periods"
}

# Main execution
analyze_commit_patterns
check_current_coverage
analyze_test_trends
check_antipatterns
generate_summary